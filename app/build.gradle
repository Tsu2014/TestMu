apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        applicationId "com.tsu.testmu"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        //minSdkVersion MIN_SDK_VERSION
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        //targetSdkVersion TAR_SDK_VERSION
        versionCode rootProject.ext.android["versionCode"]
        versionCode VERSION_CODE as int
        //versionName rootProject.ext.android["versionName"]
        versionName project.VERSION_NAME
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    //noinspection GradleCompatible
    //implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation rootProject.ext.dependencies["appcompat-v7"]
    implementation rootProject.ext.dependencies["constraint-layout"]
    implementation rootProject.ext.dependencies["arouter-api"]
    implementation rootProject.ext.dependencies["recyclerview-v7"]
    implementation rootProject.ext.dependencies["autolayout"]
    implementation rootProject.ext.dependencies["butterknife"]
    implementation rootProject.ext.dependencies["annotations"]
    implementation project(path: ':httpLib')
    implementation project(path: ':TSU_BUS')
    annotationProcessor rootProject.ext.dependencies["arouter-compiler"]
    annotationProcessor rootProject.ext.dependencies["dagger2-apt-compiler"]
    compileOnly rootProject.ext.dependencies["javax.annotation"]

    if(isNeedHomeModule.toBoolean()){
        implementation project(path : ":home")
    }
    if(isNeedChatModule.toBoolean()){
        implementation project(path : ':chat')
    }
    if(isNeedFindModule.toBoolean()){
        implementation project(path : ":find")
    }
    if(isNeedMineModule.toBoolean()){
        implementation project(path : ":mine")
    }

    rootProject.ext.dependencies.other.each{
        implementation project(it)
    }
    rootProject.ext.dependencies.anno.each{
        annotationProcessor project(it)
    }
}